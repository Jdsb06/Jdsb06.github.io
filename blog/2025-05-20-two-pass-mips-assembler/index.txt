1:"$Sreact.fragment"
2:I[77890,["621","static/chunks/621-fe77967831e7d09e.js","352","static/chunks/352-283cc22adc044423.js","874","static/chunks/874-4f14adc816ca6141.js","186","static/chunks/186-0d517975e50e4dfc.js","712","static/chunks/712-018c6c9ac7ce67ee.js","177","static/chunks/app/layout-3c53272dc0536fd0.js"],"ThemeProvider"]
3:I[82828,["621","static/chunks/621-fe77967831e7d09e.js","352","static/chunks/352-283cc22adc044423.js","874","static/chunks/874-4f14adc816ca6141.js","186","static/chunks/186-0d517975e50e4dfc.js","712","static/chunks/712-018c6c9ac7ce67ee.js","177","static/chunks/app/layout-3c53272dc0536fd0.js"],"InteractiveBackground"]
4:I[82689,["621","static/chunks/621-fe77967831e7d09e.js","352","static/chunks/352-283cc22adc044423.js","874","static/chunks/874-4f14adc816ca6141.js","186","static/chunks/186-0d517975e50e4dfc.js","712","static/chunks/712-018c6c9ac7ce67ee.js","177","static/chunks/app/layout-3c53272dc0536fd0.js"],"Navbar"]
5:I[62457,["621","static/chunks/621-fe77967831e7d09e.js","352","static/chunks/352-283cc22adc044423.js","874","static/chunks/874-4f14adc816ca6141.js","186","static/chunks/186-0d517975e50e4dfc.js","712","static/chunks/712-018c6c9ac7ce67ee.js","177","static/chunks/app/layout-3c53272dc0536fd0.js"],"AnimatePresence"]
6:I[87555,[],""]
7:I[31295,[],""]
8:I[6821,["621","static/chunks/621-fe77967831e7d09e.js","352","static/chunks/352-283cc22adc044423.js","874","static/chunks/874-4f14adc816ca6141.js","186","static/chunks/186-0d517975e50e4dfc.js","712","static/chunks/712-018c6c9ac7ce67ee.js","177","static/chunks/app/layout-3c53272dc0536fd0.js"],"Footer"]
9:I[52558,["621","static/chunks/621-fe77967831e7d09e.js","352","static/chunks/352-283cc22adc044423.js","874","static/chunks/874-4f14adc816ca6141.js","186","static/chunks/186-0d517975e50e4dfc.js","712","static/chunks/712-018c6c9ac7ce67ee.js","177","static/chunks/app/layout-3c53272dc0536fd0.js"],"Toaster"]
b:I[59665,[],"OutletBoundary"]
e:I[59665,[],"ViewportBoundary"]
10:I[59665,[],"MetadataBoundary"]
12:I[26614,[],""]
:HL["/_next/static/media/e4af272ccee01ff0-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/931b179cff3131dc.css","style"]
:HL["/_next/static/css/3e3abdff923de4bb.css","style"]
:HL["/_next/static/css/f3b8208e8dab82f4.css","style"]
0:{"P":null,"b":"k8hvf9359RKJ94F79DZmc","p":"","c":["","blog","2025-05-20-two-pass-mips-assembler",""],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","2025-05-20-two-pass-mips-assembler","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/931b179cff3131dc.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/3e3abdff923de4bb.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":["$","body",null,{"className":"__className_e8ce0c","children":["$","$L2",null,{"attribute":"class","defaultTheme":"system","enableSystem":true,"disableTransitionOnChange":true,"children":[["$","$L3",null,{}],["$","$L4",null,{}],["$","$L5",null,{"mode":"wait","children":["$","main","main-content",{"className":"min-h-screen","children":["$","$L6",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}],["$","$L8",null,{}],["$","$L9",null,{}]]}]}]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L6",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","2025-05-20-two-pass-mips-assembler","d"],["$","$1","c",{"children":[null,["$","$L6",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$La","$undefined",[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f3b8208e8dab82f4.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$Lb",null,{"children":["$Lc","$Ld",null]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","AH6_En6S3NYzeuBkHpusP",{"children":[["$","$Le",null,{"children":"$Lf"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],["$","$L10",null,{"children":"$L11"}]]}],false]],"m":"$undefined","G":["$12","$undefined"],"s":false,"S":true}
13:I[33063,["874","static/chunks/874-4f14adc816ca6141.js","63","static/chunks/63-aa6b5664b6a051a7.js","595","static/chunks/595-83002dd62b7c004d.js","953","static/chunks/app/blog/%5Bslug%5D/page-6dfc0e77efe86095.js"],"Image"]
14:I[6874,["874","static/chunks/874-4f14adc816ca6141.js","63","static/chunks/63-aa6b5664b6a051a7.js","595","static/chunks/595-83002dd62b7c004d.js","953","static/chunks/app/blog/%5Bslug%5D/page-6dfc0e77efe86095.js"],""]
15:I[86202,["874","static/chunks/874-4f14adc816ca6141.js","63","static/chunks/63-aa6b5664b6a051a7.js","595","static/chunks/595-83002dd62b7c004d.js","953","static/chunks/app/blog/%5Bslug%5D/page-6dfc0e77efe86095.js"],"BlogContent"]
16:Te69,<h1>Building a Two-Pass MIPS Assembler: A Deep Dive</h1>
<p>Assembly language programming is a fundamental skill for understanding how computers work at a low level. In this post, we'll explore the process of building a two-pass MIPS assembler, which is a crucial component in the compilation pipeline.</p>
<h2>What is a Two-Pass Assembler?</h2>
<p>A two-pass assembler processes the source code twice to handle forward references and generate the final machine code. Here's how it works:</p>
<h3>First Pass</h3>
<ul>
<li>Reads the source code and builds a symbol table</li>
<li>Assigns memory addresses to labels</li>
<li>Identifies all symbols and their values</li>
</ul>
<h3>Second Pass</h3>
<ul>
<li>Generates the actual machine code</li>
<li>Resolves all symbol references</li>
<li>Creates the final binary output</li>
</ul>
<h2>Key Components</h2>
<p>Let's look at the main components of our MIPS assembler:</p>
<pre><code class="language-python">class MIPSAssembler:
    def __init__(self):
        self.symbol_table = {}
        self.current_address = 0
        self.instructions = []
    
    def first_pass(self, source_code):
        for line in source_code:
            if self.is_label(line):
                self.symbol_table[line.strip(':')] = self.current_address
            self.current_address += 4  # MIPS instructions are 4 bytes
    
    def second_pass(self, source_code):
        for line in source_code:
            if not self.is_label(line):
                instruction = self.parse_instruction(line)
                self.instructions.append(instruction)
</code></pre>
<h2>Handling Different Instruction Types</h2>
<p>MIPS instructions can be categorized into three types:</p>
<ol>
<li>R-type instructions (register operations)</li>
<li>I-type instructions (immediate operations)</li>
<li>J-type instructions (jump operations)</li>
</ol>
<p>Here's how we handle each type:</p>
<pre><code class="language-python">def parse_instruction(self, line):
    parts = line.split()
    opcode = parts[0]
    
    if opcode in R_TYPE_INSTRUCTIONS:
        return self.parse_r_type(parts)
    elif opcode in I_TYPE_INSTRUCTIONS:
        return self.parse_i_type(parts)
    elif opcode in J_TYPE_INSTRUCTIONS:
        return self.parse_j_type(parts)
</code></pre>
<h2>Symbol Resolution</h2>
<p>One of the most challenging aspects is handling symbol resolution, especially for forward references:</p>
<pre><code class="language-python">def resolve_symbol(self, symbol):
    if symbol in self.symbol_table:
        return self.symbol_table[symbol]
    else:
        raise AssemblerError(f"Undefined symbol: {symbol}")
</code></pre>
<h2>Testing and Validation</h2>
<p>It's crucial to test the assembler with various test cases:</p>
<pre><code class="language-python">def test_assembler():
    assembler = MIPSAssembler()
    source_code = [
        "start:",
        "    add $t0, $t1, $t2",
        "    beq $t0, $zero, start",
        "    j end",
        "end:"
    ]
    
    assembler.first_pass(source_code)
    assembler.second_pass(source_code)
    assert len(assembler.instructions) == 3
</code></pre>
<h2>Conclusion</h2>
<p>Building a MIPS assembler is a great way to understand:</p>
<ul>
<li>Assembly language processing</li>
<li>Symbol table management</li>
<li>Binary code generation</li>
<li>Compiler design principles</li>
</ul>
<p>The complete implementation includes many more features like:</p>
<ul>
<li>Error handling</li>
<li>Pseudo-instruction support</li>
<li>Relocation information</li>
<li>Debug information generation</li>
</ul>
<p>Would you like to see more specific parts of the implementation or learn about any particular aspect in more detail?</p>
a:["$","article",null,{"className":"min-h-screen","children":[["$","section",null,{"className":"relative h-[60vh] min-h-[400px]","children":[["$","$L13",null,{"src":"/images/RISC-2.jpg","alt":"Building a Two-Pass MIPS Assembler: A Deep Dive","fill":true,"className":"object-cover","priority":true}],["$","div",null,{"className":"absolute inset-0 bg-gradient-to-b from-background/80 to-background"}],["$","div",null,{"className":"absolute inset-0 flex items-center","children":["$","div",null,{"className":"container mx-auto px-4","children":["$","div",null,{"className":"max-w-3xl","children":[["$","$L14",null,{"href":"/blog","className":"inline-flex items-center text-primary hover:underline mb-6","children":[["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-arrow-left w-4 h-4 mr-2","children":[["$","path","1l729n",{"d":"m12 19-7-7 7-7"}],["$","path","x3x0zl",{"d":"M19 12H5"}],"$undefined"]}],"Back to Blog"]}],["$","h1",null,{"className":"text-4xl md:text-5xl font-bold mb-4","children":"Building a Two-Pass MIPS Assembler: A Deep Dive"}],["$","div",null,{"className":"flex flex-wrap items-center gap-4 text-muted-foreground","children":[["$","span",null,{"className":"flex items-center","children":[["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-calendar w-4 h-4 mr-2","children":[["$","path","1cmpym",{"d":"M8 2v4"}],["$","path","4m81vk",{"d":"M16 2v4"}],["$","rect","1hopcy",{"width":"18","height":"18","x":"3","y":"4","rx":"2"}],["$","path","8toen8",{"d":"M3 10h18"}],"$undefined"]}],"5/20/2025"]}],["$","span",null,{"className":"flex items-center","children":[["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-clock w-4 h-4 mr-2","children":[["$","circle","1mglay",{"cx":"12","cy":"12","r":"10"}],["$","polyline","68esgv",{"points":"12 6 12 12 16 14"}],"$undefined"]}],"2 min read"]}],["$","div",null,{"className":"flex flex-wrap gap-2","children":[["$","span","Assembly",{"className":"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-primary/10 text-primary","children":[["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-tag w-3 h-3 mr-1","children":[["$","path","vktsd0",{"d":"M12.586 2.586A2 2 0 0 0 11.172 2H4a2 2 0 0 0-2 2v7.172a2 2 0 0 0 .586 1.414l8.704 8.704a2.426 2.426 0 0 0 3.42 0l6.58-6.58a2.426 2.426 0 0 0 0-3.42z"}],["$","circle","kqv944",{"cx":"7.5","cy":"7.5","r":".5","fill":"currentColor"}],"$undefined"]}],"Assembly"]}],["$","span","MIPS",{"className":"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-primary/10 text-primary","children":[["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-tag w-3 h-3 mr-1","children":[["$","path","vktsd0",{"d":"M12.586 2.586A2 2 0 0 0 11.172 2H4a2 2 0 0 0-2 2v7.172a2 2 0 0 0 .586 1.414l8.704 8.704a2.426 2.426 0 0 0 3.42 0l6.58-6.58a2.426 2.426 0 0 0 0-3.42z"}],["$","circle","kqv944",{"cx":"7.5","cy":"7.5","r":".5","fill":"currentColor"}],"$undefined"]}],"MIPS"]}],["$","span","Compiler Design",{"className":"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-primary/10 text-primary","children":[["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-tag w-3 h-3 mr-1","children":[["$","path","vktsd0",{"d":"M12.586 2.586A2 2 0 0 0 11.172 2H4a2 2 0 0 0-2 2v7.172a2 2 0 0 0 .586 1.414l8.704 8.704a2.426 2.426 0 0 0 3.42 0l6.58-6.58a2.426 2.426 0 0 0 0-3.42z"}],["$","circle","kqv944",{"cx":"7.5","cy":"7.5","r":".5","fill":"currentColor"}],"$undefined"]}],"Compiler Design"]}],["$","span","Systems Programming",{"className":"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-primary/10 text-primary","children":[["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-tag w-3 h-3 mr-1","children":[["$","path","vktsd0",{"d":"M12.586 2.586A2 2 0 0 0 11.172 2H4a2 2 0 0 0-2 2v7.172a2 2 0 0 0 .586 1.414l8.704 8.704a2.426 2.426 0 0 0 3.42 0l6.58-6.58a2.426 2.426 0 0 0 0-3.42z"}],["$","circle","kqv944",{"cx":"7.5","cy":"7.5","r":".5","fill":"currentColor"}],"$undefined"]}],"Systems Programming"]}]]}]]}]]}]}]}]]}],["$","section",null,{"className":"py-12","children":["$","div",null,{"className":"container mx-auto px-4","children":["$","div",null,{"className":"max-w-3xl mx-auto","children":["$","$L15",null,{"content":"$16"}]}]}]}]]}]
f:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
c:null
d:null
11:[["$","title","0",{"children":"Building a Two-Pass MIPS Assembler: A Deep Dive | Jashandeep Singh"}],["$","meta","1",{"name":"description","content":"Learn how to build a two-pass MIPS assembler from scratch, understanding the intricacies of assembly language processing and symbol resolution."}],["$","meta","2",{"name":"robots","content":"index, follow"}],["$","meta","3",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","meta","4",{"property":"og:title","content":"Building a Two-Pass MIPS Assembler: A Deep Dive"}],["$","meta","5",{"property":"og:description","content":"Learn how to build a two-pass MIPS assembler from scratch, understanding the intricacies of assembly language processing and symbol resolution."}],["$","meta","6",{"property":"og:image","content":"http://localhost:3000/images/RISC-2.jpg"}],["$","meta","7",{"property":"og:image:width","content":"1200"}],["$","meta","8",{"property":"og:image:height","content":"630"}],["$","meta","9",{"property":"og:image:alt","content":"Building a Two-Pass MIPS Assembler: A Deep Dive"}],["$","meta","10",{"property":"og:type","content":"article"}],["$","meta","11",{"property":"article:published_time","content":"2025-05-20"}],["$","meta","12",{"property":"article:author","content":"Jashandeep Singh"}],["$","meta","13",{"property":"article:tag","content":"Assembly"}],["$","meta","14",{"property":"article:tag","content":"MIPS"}],["$","meta","15",{"property":"article:tag","content":"Compiler Design"}],["$","meta","16",{"property":"article:tag","content":"Systems Programming"}],["$","meta","17",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","18",{"name":"twitter:title","content":"Building a Two-Pass MIPS Assembler: A Deep Dive"}],["$","meta","19",{"name":"twitter:description","content":"Learn how to build a two-pass MIPS assembler from scratch, understanding the intricacies of assembly language processing and symbol resolution."}],["$","meta","20",{"name":"twitter:image","content":"http://localhost:3000/images/RISC-2.jpg"}],["$","meta","21",{"name":"twitter:image:width","content":"1200"}],["$","meta","22",{"name":"twitter:image:height","content":"630"}],["$","meta","23",{"name":"twitter:image:alt","content":"Building a Two-Pass MIPS Assembler: A Deep Dive"}],["$","link","24",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
