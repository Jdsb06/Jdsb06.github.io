1:"$Sreact.fragment"
2:I[77890,["621","static/chunks/621-fe77967831e7d09e.js","352","static/chunks/352-283cc22adc044423.js","874","static/chunks/874-4f14adc816ca6141.js","186","static/chunks/186-0d517975e50e4dfc.js","712","static/chunks/712-03e200260308ff50.js","177","static/chunks/app/layout-3c53272dc0536fd0.js"],"ThemeProvider"]
3:I[82828,["621","static/chunks/621-fe77967831e7d09e.js","352","static/chunks/352-283cc22adc044423.js","874","static/chunks/874-4f14adc816ca6141.js","186","static/chunks/186-0d517975e50e4dfc.js","712","static/chunks/712-03e200260308ff50.js","177","static/chunks/app/layout-3c53272dc0536fd0.js"],"InteractiveBackground"]
4:I[62457,["621","static/chunks/621-fe77967831e7d09e.js","352","static/chunks/352-283cc22adc044423.js","874","static/chunks/874-4f14adc816ca6141.js","186","static/chunks/186-0d517975e50e4dfc.js","712","static/chunks/712-03e200260308ff50.js","177","static/chunks/app/layout-3c53272dc0536fd0.js"],"AnimatePresence"]
5:I[82689,["621","static/chunks/621-fe77967831e7d09e.js","352","static/chunks/352-283cc22adc044423.js","874","static/chunks/874-4f14adc816ca6141.js","186","static/chunks/186-0d517975e50e4dfc.js","712","static/chunks/712-03e200260308ff50.js","177","static/chunks/app/layout-3c53272dc0536fd0.js"],"Navbar"]
6:I[87555,[],""]
7:I[31295,[],""]
8:I[6821,["621","static/chunks/621-fe77967831e7d09e.js","352","static/chunks/352-283cc22adc044423.js","874","static/chunks/874-4f14adc816ca6141.js","186","static/chunks/186-0d517975e50e4dfc.js","712","static/chunks/712-03e200260308ff50.js","177","static/chunks/app/layout-3c53272dc0536fd0.js"],"Footer"]
9:I[52558,["621","static/chunks/621-fe77967831e7d09e.js","352","static/chunks/352-283cc22adc044423.js","874","static/chunks/874-4f14adc816ca6141.js","186","static/chunks/186-0d517975e50e4dfc.js","712","static/chunks/712-03e200260308ff50.js","177","static/chunks/app/layout-3c53272dc0536fd0.js"],"Toaster"]
b:I[59665,[],"OutletBoundary"]
e:I[59665,[],"ViewportBoundary"]
10:I[59665,[],"MetadataBoundary"]
12:I[26614,[],""]
:HL["/_next/static/media/a34f9d1faa5f3315-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/b3cbcd051438d1d5.css","style"]
:HL["/_next/static/css/e2b243b1a6d26c88.css","style"]
0:{"P":null,"b":"8Yew2mgPwxi2O8C4yoc6S","p":"","c":["","blog"],"i":false,"f":[[["",{"children":["blog",{"children":["__PAGE__",{}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/b3cbcd051438d1d5.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/e2b243b1a6d26c88.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":["$","body",null,{"className":"__className_d65c78","children":["$","$L2",null,{"attribute":"class","defaultTheme":"system","enableSystem":true,"disableTransitionOnChange":true,"children":[["$","$L3",null,{}],["$","$L4",null,{"mode":"wait","children":[["$","$L5","navbar",{}],["$","main","main-content",{"className":"min-h-screen","children":["$","$L6",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","$L8","footer",{}]]}],["$","$L9",null,{}]]}]}]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L6",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$La","$undefined",null,["$","$Lb",null,{"children":["$Lc","$Ld",null]}]]}],{},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","EzFjDvhg2jVFlLDAAm9xo",{"children":[["$","$Le",null,{"children":"$Lf"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],["$","$L10",null,{"children":"$L11"}]]}],false]],"m":"$undefined","G":["$12","$undefined"],"s":false,"S":true}
13:I[71160,["621","static/chunks/621-fe77967831e7d09e.js","874","static/chunks/874-4f14adc816ca6141.js","63","static/chunks/63-ed3d01daec4ec803.js","831","static/chunks/app/blog/page-4fc36c98084f972e.js"],"BlogClient"]
14:T15c8,
# Creating Interactive Particle Backgrounds in React

Interactive particle backgrounds can add a dynamic and engaging element to your web applications. In this post, we'll explore how to create a performant particle system using React and the HTML5 Canvas API.

## Setting Up the Canvas Component

First, let's create a basic canvas component:

```typescript
import { useEffect, useRef } from 'react';

interface Particle {
  x: number;
  y: number;
  vx: number;
  vy: number;
  radius: number;
  color: string;
}

export function ParticleBackground() {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const particles = useRef<Particle[]>([]);
  
  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;
    
    const ctx = canvas.getContext('2d');
    if (!ctx) return;
    
    // Initialize particles
    particles.current = Array.from({ length: 100 }, () => ({
      x: Math.random() * canvas.width,
      y: Math.random() * canvas.height,
      vx: (Math.random() - 0.5) * 2,
      vy: (Math.random() - 0.5) * 2,
      radius: Math.random() * 3 + 1,
      color: `hsl(${Math.random() * 360}, 50%, 50%)`
    }));
    
    // Animation loop
    let animationFrameId: number;
    const animate = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      
      particles.current.forEach(particle => {
        // Update position
        particle.x += particle.vx;
        particle.y += particle.vy;
        
        // Bounce off walls
        if (particle.x < 0 || particle.x > canvas.width) particle.vx *= -1;
        if (particle.y < 0 || particle.y > canvas.height) particle.vy *= -1;
        
        // Draw particle
        ctx.beginPath();
        ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);
        ctx.fillStyle = particle.color;
        ctx.fill();
      });
      
      animationFrameId = requestAnimationFrame(animate);
    };
    
    animate();
    
    return () => {
      cancelAnimationFrame(animationFrameId);
    };
  }, []);
  
  return (
    <canvas
      ref={canvasRef}
      className="fixed inset-0 -z-10"
      style={{ width: '100%', height: '100%' }}
    />
  );
}
```

## Adding Interactivity

Let's make the particles respond to mouse movement:

```typescript
function ParticleBackground() {
  // ... previous code ...
  
  const handleMouseMove = (event: React.MouseEvent<HTMLCanvasElement>) => {
    const canvas = canvasRef.current;
    if (!canvas) return;
    
    const rect = canvas.getBoundingClientRect();
    const mouseX = event.clientX - rect.left;
    const mouseY = event.clientY - rect.top;
    
    particles.current.forEach(particle => {
      const dx = mouseX - particle.x;
      const dy = mouseY - particle.y;
      const distance = Math.sqrt(dx * dx + dy * dy);
      
      if (distance < 100) {
        const angle = Math.atan2(dy, dx);
        const force = (100 - distance) / 100;
        
        particle.vx -= Math.cos(angle) * force * 0.2;
        particle.vy -= Math.sin(angle) * force * 0.2;
      }
    });
  };
  
  return (
    <canvas
      ref={canvasRef}
      onMouseMove={handleMouseMove}
      className="fixed inset-0 -z-10"
      style={{ width: '100%', height: '100%' }}
    />
  );
}
```

## Optimizing Performance

To ensure smooth animations, we need to optimize our particle system:

```typescript
function ParticleBackground() {
  // ... previous code ...
  
  const drawParticles = useCallback((ctx: CanvasRenderingContext2D) => {
    particles.current.forEach(particle => {
      ctx.beginPath();
      ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);
      ctx.fillStyle = particle.color;
      ctx.fill();
    });
  }, []);
  
  const updateParticles = useCallback(() => {
    particles.current.forEach(particle => {
      particle.x += particle.vx;
      particle.y += particle.vy;
      
      // Add velocity damping
      particle.vx *= 0.99;
      particle.vy *= 0.99;
      
      // Bounce off walls with damping
      if (particle.x < 0 || particle.x > canvas.width) {
        particle.vx *= -0.8;
        particle.x = Math.max(0, Math.min(particle.x, canvas.width));
      }
      if (particle.y < 0 || particle.y > canvas.height) {
        particle.vy *= -0.8;
        particle.y = Math.max(0, Math.min(particle.y, canvas.height));
      }
    });
  }, []);
}
```

## Adding Particle Connections

To create a network effect, we can draw lines between nearby particles:

```typescript
function drawConnections(ctx: CanvasRenderingContext2D) {
  for (let i = 0; i < particles.current.length; i++) {
    for (let j = i + 1; j < particles.current.length; j++) {
      const p1 = particles.current[i];
      const p2 = particles.current[j];
      
      const dx = p1.x - p2.x;
      const dy = p1.y - p2.y;
      const distance = Math.sqrt(dx * dx + dy * dy);
      
      if (distance < 100) {
        ctx.beginPath();
        ctx.moveTo(p1.x, p1.y);
        ctx.lineTo(p2.x, p2.y);
        ctx.strokeStyle = `rgba(255, 255, 255, ${0.2 * (1 - distance / 100)})`;
        ctx.stroke();
      }
    }
  }
}
```

## Conclusion

This particle system can be further enhanced with:
- Color transitions
- Particle size variations
- Different interaction behaviors
- Performance optimizations for mobile devices
- Custom particle shapes
- Physics-based interactions

The complete implementation provides a foundation for creating engaging background effects that can be customized to match your application's design.

Would you like to explore any specific aspect of the particle system in more detail? 15:Tccf,
# Building a Two-Pass MIPS Assembler: A Deep Dive

Assembly language programming is a fundamental skill for understanding how computers work at a low level. In this post, we'll explore the process of building a two-pass MIPS assembler, which is a crucial component in the compilation pipeline.

## What is a Two-Pass Assembler?

A two-pass assembler processes the source code twice to handle forward references and generate the final machine code. Here's how it works:

### First Pass
- Reads the source code and builds a symbol table
- Assigns memory addresses to labels
- Identifies all symbols and their values

### Second Pass
- Generates the actual machine code
- Resolves all symbol references
- Creates the final binary output

## Key Components

Let's look at the main components of our MIPS assembler:

```python
class MIPSAssembler:
    def __init__(self):
        self.symbol_table = {}
        self.current_address = 0
        self.instructions = []
    
    def first_pass(self, source_code):
        for line in source_code:
            if self.is_label(line):
                self.symbol_table[line.strip(':')] = self.current_address
            self.current_address += 4  # MIPS instructions are 4 bytes
    
    def second_pass(self, source_code):
        for line in source_code:
            if not self.is_label(line):
                instruction = self.parse_instruction(line)
                self.instructions.append(instruction)
```

## Handling Different Instruction Types

MIPS instructions can be categorized into three types:

1. R-type instructions (register operations)
2. I-type instructions (immediate operations)
3. J-type instructions (jump operations)

Here's how we handle each type:

```python
def parse_instruction(self, line):
    parts = line.split()
    opcode = parts[0]
    
    if opcode in R_TYPE_INSTRUCTIONS:
        return self.parse_r_type(parts)
    elif opcode in I_TYPE_INSTRUCTIONS:
        return self.parse_i_type(parts)
    elif opcode in J_TYPE_INSTRUCTIONS:
        return self.parse_j_type(parts)
```

## Symbol Resolution

One of the most challenging aspects is handling symbol resolution, especially for forward references:

```python
def resolve_symbol(self, symbol):
    if symbol in self.symbol_table:
        return self.symbol_table[symbol]
    else:
        raise AssemblerError(f"Undefined symbol: {symbol}")
```

## Testing and Validation

It's crucial to test the assembler with various test cases:

```python
def test_assembler():
    assembler = MIPSAssembler()
    source_code = [
        "start:",
        "    add $t0, $t1, $t2",
        "    beq $t0, $zero, start",
        "    j end",
        "end:"
    ]
    
    assembler.first_pass(source_code)
    assembler.second_pass(source_code)
    assert len(assembler.instructions) == 3
```

## Conclusion

Building a MIPS assembler is a great way to understand:
- Assembly language processing
- Symbol table management
- Binary code generation
- Compiler design principles

The complete implementation includes many more features like:
- Error handling
- Pseudo-instruction support
- Relocation information
- Debug information generation

Would you like to see more specific parts of the implementation or learn about any particular aspect in more detail? 16:Tf5b,e
# Welcome to the Launch of Peru 24/7: Behind the Scenes with Your News Team

Hola, and welcome to the inaugural post of our Peru 24/7 blog! I’m Jashandeep Singh—video editor, cameraman, and logo designer for our English-language news channel—and I’m thrilled to pull back the curtain and share how our dedicated team is bringing you the latest from Peru, around the clock.

---

## Our Mission: Real Stories, Real Time  
At Peru 24/7, our goal is simple: deliver timely, trustworthy news that connects you with Peruvian culture, politics, and community life. We’ve gathered a diverse group of reporters, anchors, social activists, engineers, and spiritual voices to give you a 360° view of every story—from the heart of Lima to the shores of Lake Titicaca.

---

## Crafting the Look: Logo Design & Branding  
A news channel is only as recognizable as its brand. When I sat down to design our logo, I wanted something that felt modern, bold, and uniquely Peruvian.  
- **Color & Contrast:** I experimented with deep crimson—an homage to Peru’s flag—and slate gray to convey professionalism.  
- **Photo Editing Techniques:** Using tools like Photoshop and Canva, I enhanced iconography of the Andean condor and simplified it into a sleek silhouette. By adjusting curves and contrast, I ensured the final logo pops on both large screens and mobile devices.  

Every element was refined to balance simplicity with cultural resonance, resulting in a mark we’re proud to share.

---

## Behind the Camera: Framing & Lighting  
As the channel’s cameraman, I’ve learned that a frame isn’t just what you see—it’s how you feel.  
- **Framing:** Properly positioning your subject can guide the viewer’s focus. I experimented with the rule of thirds to make interviews feel dynamic and engaging.  
- **Lighting:** Natural light often tells the truest story, but cityscapes and evening reports call for careful artificial setup. I learned how to mix softboxes with on-camera LEDs to maintain consistent color temperature, whether we’re on the Plaza de Armas at noon or inside a candlelit church.  

Mastering these techniques gave our footage a polished, professional look—essential for keeping viewers glued to the screen.

---

## Editing the Narrative  
Once the footage is in the can, it’s my job to weave it into a coherent story. I learned to:  
1. **Select the Best Clips:** Not every shot makes the cut! I trimmed for clarity and impact.  
2. **Sync Audio & Video:** A split second’s lag can break immersion—so I make sure our anchors’ words match the visuals perfectly.  
3. **Use Transitions Wisely:** Quick cuts keep the pace lively, while smooth fades give viewers a moment to absorb complex information.  

Through trial and error, I discovered shortcuts and advanced features in Premiere Pro that speed up my workflow without sacrificing quality.

---

## Teamwork & Time Management  
Juggling three roles meant I had to become a master of planning. I mapped out filming days, design sprints, and editing deadlines on a shared calendar. Regular check-ins with our anchors and reporters ensured everyone’s feedback was integrated before final release. The result? A truly collaborative newsroom where every voice matters.

---

## What’s Next for Peru 24/7?  
Stay tuned as we expand our coverage—coming soon:
- **On-the-ground Reports** from Cusco and the Sacred Valley  
- **In-depth Features** on Peruvian cuisine and sustainable tourism  
- **Live Debates** on environmental policy, sports, and culture  

We invite you to subscribe, share your thoughts in the comments, and follow us on social media for instant updates. Thank you for joining us at the start of this adventure—Peru 24/7 is here to inform, inspire, and connect you to the beating heart of Peru, 24 hours a day, 7 days a week.

¡Hasta pronto!  
— Jashandeep Singh, Video Editor & Cameraman, Peru 24/7
17:Tcd8,
# Build Your Own Python-Powered CLI Ticketing Platform

Event ticketing has come a long way from paper stubs and phone reservations. With the rise of digital platforms, users expect instant booking, real‑time availability, and seamless payment flows. **BookMyShow**, a leading ticketing portal, sets a high bar. In this blog, we'll walk through building a lightweight, menu‑driven application inspired by BookMyShow, powered by Python and MySQL.

## Key Features

1. **Multi‑Category Shows**: Movies, comedy gigs, adventure events, and music festivals—all managed under one roof.
2. **Dynamic Language & Time Slots**: Each show supports multiple languages and screening times stored in JSON‑formatted columns.
3. **User Accounts**: Sign‑up, sign‑in, profile management, and secure password updates.
4. **Booking Flow**: Choose a show, select language and time, specify ticket count, and confirm bookings.
5. **Trending Dashboard**: Quickly surface trending events to keep users engaged.

## Under the Hood

### Database Schema (MySQL)

```sql
CREATE TABLE shows (
  show_id INT AUTO_INCREMENT PRIMARY KEY,
  title VARCHAR(255) NOT NULL,
  type ENUM('movie','comedy','adventure','music'),
  languages JSON,
  time_slots JSON,
  is_trending BOOLEAN DEFAULT FALSE
);

CREATE TABLE users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50),
  email VARCHAR(100),
  pass_word VARCHAR(100),
  city VARCHAR(50)
);

CREATE TABLE bookings (
  booking_id INT AUTO_INCREMENT PRIMARY KEY,
  user_id INT,
  show_id INT,
  num_tickets INT,
  booking_time DATETIME DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES users(user_id),
  FOREIGN KEY (show_id) REFERENCES shows(show_id)
);
```

### Core Python Modules

- `mysql-connector-python`: Seamless DB operations
- `pandas`: Tabular display of shows and bookings in CLI
- `json`: Parse and store `languages` & `time_slots` arrays

```python
import mysql.connector, json

conn = mysql.connector.connect(...)
cursor = conn.cursor()

# Fetch shows
def display_shows():
    cursor.execute('SELECT show_id, title, languages, time_slots FROM shows')
    for sid, title, langs, slots in cursor.fetchall():
        print(f"{sid}: {title}")
        print(" Languages:", ', '.join(json.loads(langs)))
        print(" Time Slots:", ', '.join(json.loads(slots)))

# Booking flow
def book_show(user_id):
    sid = int(input("Enter Show ID: "))
    # ... choose language, time, tickets
    cursor.execute(
      'INSERT INTO bookings (user_id, show_id, num_tickets) VALUES (%s,%s,%s)',
      (user_id, sid, ticket_count)
    )
    conn.commit()
    print("Booking confirmed!")
```

### Menu‑Driven CLI

```python
while True:
  print("1. View Shows  2. Book Show  3. My Bookings  4. Account  5. Trending  6. Exit")
  choice = input()
  if choice=='2': book_show(current_user)
  elif choice=='6': break
  # ... other options
```

## Conclusion

This minimalistic BookMyShow clone demonstrates how Python and MySQL can power a robust ticket‑booking system. By leveraging JSON columns, we handled complex data like multi‑language and dynamic time slots within a single table. From here, you can expand to a full web or mobile interface, implement payment gateways, and deploy to the cloud. The possibilities are endless—happy coding!
a:["$","$L13",null,{"initialPosts":[{"slug":"2025-06-05-particle-backgrounds-react","content":"$14","title":"Creating Interactive Particle Backgrounds in React","date":"2025-06-05","excerpt":"Learn how to create beautiful, interactive particle backgrounds in React using Canvas and requestAnimationFrame for smooth animations.","coverImage":"/images/demo.png","tags":["React","Canvas","Animation","Web Development"]},{"slug":"2025-05-20-two-pass-mips-assembler","content":"$15","title":"Building a Two-Pass MIPS Assembler: A Deep Dive","date":"2025-05-20","excerpt":"Learn how to build a two-pass MIPS assembler from scratch, understanding the intricacies of assembly language processing and symbol resolution.","coverImage":"/images/RISC-2.jpg","tags":["Assembly","MIPS","Compiler Design","Systems Programming"]},{"slug":"2025-10-28-peru-24-7","content":"$16","title":"Launching Peru 24/7: Behind the Scenes with Your News Team","date":"2024-10-28","excerpt":"In our inaugural post, video editor and cameraman Jashandeep Singh pulls back the curtain on Peru 24/7—sharing how our logo was designed, how we frame and light every shot, and the editing process that brings our stories to life.","coverImage":"/images/peru.png","readingTime":"5 min","tags":["News","Peru","Video Production","Logo Design","Media","Broadcasting"]},{"slug":"2023-02-16-bookmyshow-cli","content":"$17","title":"BookMyShow CLI: Seamless Ticket Booking in Python & MySQL","date":"2023-02-16","excerpt":"Discover how to build a versatile, menu-driven ticket booking application using Python and MySQL—supporting movies, shows, multi-language screenings, and dynamic time slots.","coverImage":"/images/BMS-1.jpg","tags":["Python","MySQL","Ticket Booking","Web Development","Entertainment"]}],"tags":["Animation","Assembly","Broadcasting","Canvas","Compiler Design","Entertainment","Logo Design","MIPS","Media","MySQL","News","Peru","Python","React","Systems Programming","Ticket Booking","Video Production","Web Development"]}]
f:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
c:null
d:null
11:[["$","title","0",{"children":"Jashandeep Singh | Software Engineer & Media Enthusiast"}],["$","meta","1",{"name":"description","content":"Personal portfolio of Jashandeep Singh, an aspiring software engineer, project enthusiast, and media creator."}],["$","meta","2",{"name":"robots","content":"index, follow"}],["$","meta","3",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","meta","4",{"property":"og:title","content":"Jashandeep Singh | Software Engineer & Media Enthusiast"}],["$","meta","5",{"property":"og:description","content":"Personal portfolio of Jashandeep Singh, showcasing projects, skills, and experience."}],["$","meta","6",{"property":"og:url","content":"https://example.com"}],["$","meta","7",{"property":"og:site_name","content":"JS Portfolio"}],["$","meta","8",{"property":"og:locale","content":"en_US"}],["$","meta","9",{"property":"og:type","content":"website"}],["$","meta","10",{"name":"twitter:card","content":"summary"}],["$","meta","11",{"name":"twitter:title","content":"Jashandeep Singh | Software Engineer & Media Enthusiast"}],["$","meta","12",{"name":"twitter:description","content":"Personal portfolio of Jashandeep Singh, showcasing projects, skills, and experience."}],["$","link","13",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
